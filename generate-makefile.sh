#!/bin/bash

####################################################################################################

# generateMakefiles.sh by Nil Geisweiller
#
# That script generates Makefile.flymake (or rather Makefile for now) all over the CMake project.
# It takes 1 argument, the name of the building dir

if [ ! -n "${1}" ]; then
  echo "Wrong number of argument"
  echo "Usage: ${0} BUILD_DIR_NAME"
  exit 1
else
  BUILD_NAME="${1}"
fi

#MAKEFILE_NAME="Makefile.flymake"
MAKEFILE_NAME="Makefile"

# for each CMakeLists.txt found from the current directory
# create the associated Makefile.flymake (or rather Makefile for now).
while read -r -d $'\0' FILEPATH
do
  RELATIVE_MAKEFILE_DIR=${FILEPATH%/*}
  MAKEFILE_PATH=${RELATIVE_MAKEFILE_DIR}/${MAKEFILE_NAME}
  LAST_DIR=${RELATIVE_MAKEFILE_DIR##*/}
  FLAGS_DIR="${PWD}/${BUILD_NAME}/${RELATIVE_MAKEFILE_DIR}/CMakeFiles/${LAST_DIR}.dir/" # Fixme qtcarto.dir
  # write the content of the Makefile
  echo Generate ${MAKEFILE_PATH}
  echo "# Automatically generated by ${0}, you may remove it using removeMakefiles.sh as you please" > ${MAKEFILE_PATH}
  echo "include ${FLAGS_DIR}flags.make" >> ${MAKEFILE_PATH}
  echo "check-syntax:" >> ${MAKEFILE_PATH}
  echo -e "\tc++ -o /dev/null \${CXX_FLAGS} \${CXX_DEFINES} \${CXX_INCLUDES} -S \${CHK_SOURCES}" >> ${MAKEFILE_PATH}
  echo ".PHONY: check-syntax" >> ${MAKEFILE_PATH}
done < <( find . -name "CMakeLists.txt" -print0 )

exit 0

####################################################################################################
#
# End
#
####################################################################################################
